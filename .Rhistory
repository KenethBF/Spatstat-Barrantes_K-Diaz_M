install.packages("spatstat")
library(spatstat)
install.packages("Rtools")
setwd("/Carapa/Datos")
setwd("/Datos")
wd <- "/Datos/"
setwd(wd)
getwd()
carapa <- read.csv("Mapeamento_parcelas.csv", header = T, sep = ",")
getwd()
carapa <- read.csv("Datos/Mapeamento_parcelas.csv", header = T, sep = ",")
carapa <- read.csv("Datos/Mapeamento_parcelas.csv", header = T, sep = ",")
head(carapa)
View(carapa)
carapa1 <- read.csv("Datos/Mapeamento_parcelas1.csv", header = T, sep = ",")
head(carapa)
View(carapa1)
# Especificar el folder de trabajo 1
setwd("D:/UCR/OneDrive - Universidad de Costa Rica/Biolo/R avanzado/Graficacion ggplot2/")
wd <- getwd()
getwd()
# Load packages
library(ggplot2)
# Importar base de datos
dat <- read.csv("data.elasmos.csv", header = T, sep = ",",
stringsAsFactors = TRUE)
head(dat)
# Subset de especies
mhe <- dat[dat$species == "Mustelus henlei", ]
mhe
head(dat)
View(dat)
# Subset de especies
mhe <- dat[dat$species == "Mustelus henlei", ]
mhe$species <- factor(mhe$species)
str(mhe)
# Crear gráfico en ggplot2
ggplot(data = mhe, aes(x = TL, y = dN15)) + geom_point()
# Este código va a producir lo mismo
ggplot(mhe, aes(TL, dN15)) + geom_point()
ggplot(mhe, aes(dN15, TL)) + geom_point()
# Este código va a producir lo mismo
ggplot(mhe, aes(TL, dN15)) + geom_point()
ggplot(mhe, aes(dN15, TL)) + geom_point()
# Gráfico con un color para cada sexo
mhe$sex <- factor(mhe$sex, levels = c("Male", "Female"))
levels(mhe$sex)
# ventaja ggplot2 capas se pueden guardar objetos como capas y as[i solo sumarlos cuando uno quiera
p <- ggplot(data = mhe, aes(x = TL, y = dN15))
pp <- geom_point()
p1 <- p + pp
pp <- geom_point()
dev.off()
# ventaja ggplot2 capas se pueden guardar objetos como capas y as[i solo sumarlos cuando uno quiera
p <- ggplot(data = mhe, aes(x = TL, y = dN15))
pp <- geom_point()
p1 <- p + pp
p1 <- p + pp
# ventaja ggplot2 capas se pueden guardar objetos como capas y as[i solo sumarlos cuando uno quiera
p <- ggplot(data = mhe, aes(x = TL, y = dN15))
pp <- geom_point()
p1 <- p + pp
p1
# Este código va a producir lo mismo
ggplot(mhe, aes(TL, dN15)) + geom_point()
ggplot(mhe, aes(dN15, TL)) + geom_point()
# Gráfico con un color para cada sexo
mhe$sex <- factor(mhe$sex, levels = c("Male", "Female"))
levels(mhe$sex)
ggplot(mhe, aes(x = TL, y = dN15, color = sex)) + geom_point()
# Gráfico con un color para cada mes
ggplot(mhe, aes(TL, dN15, colour = month)) + geom_point()
# Gráfico con un símbolo para cada sexo
ggplot(mhe, aes(TL, dN15, shape = sex)) + geom_point()
ggplot(mhe, aes(TL, dN15, pch = sex)) + geom_point()
# Gráfico con un tamaño para cada profundidad
ggplot(mhe, aes(TL, dN15, size = depth)) + geom_point()
# Cambiar color de símbolos
ggplot(mhe, aes(TL, dN15)) +
geom_point(color = "#2FC11899")
ggplot(mhe, aes(x = TL, y = dN15)) +
geom_point(aes(color = "blue"))
# Cambiar color de símbolos
ggplot(mhe, aes(TL, dN15)) +
geom_point(color = "#2FC11899")	# si se coloca color en la parte de geometria ya no se asigna a variable
ggplot(mhe, aes(x = TL, y = dN15)) +
geom_point(aes(color = "blue"))
# Cambiar color de símbolos
ggplot(mhe, aes(TL, dN15)) +
geom_point(color = "#2FC11899")	# si se coloca color en la parte de geometria ya no se asigna a variable
ggplot(mhe, aes(x = TL, y = dN15)) +
geom_point(aes(color = "blue"))
ggplot(mhe, aes(x = TL, y = dN15)) +
geom_point(color = "blue")
# El color esta dado por una variable
ggplot(mhe, aes(TL, dN15)) +
geom_point(aes(colour = sex))
# Cambiar las formas de los puntos, el tamaño y definir color azul
ggplot(mhe, aes(TL, dN15, shape = sex)) +
geom_point(color = "blue", cex = 7)
ggplot(mhe, aes(TL, dN15, shape = sex)) +
geom_point(color = "blue", size = 3)
# Cambiar el símbolo, el color y el tamaño del símbolo
ggplot(mhe, aes(TL, dN15, pch = month)) +
geom_point(color = "red", cex = 5)
# Cambiar las formas de los puntos y definir color azul
ggplot(mhe, aes(TL, dN15, shape = sex)) +
geom_point(colour = "blue")
# Cambiar las formas de los puntos y colores
ggplot(mhe, aes(x = TL, y = dN15,
shape = sex, color = sex)) +
geom_point(size = 8)
ggplot(mhe, aes(x = TL, y = dN15)) +
geom_point(aes(pch = sex, color = sex), size = 4)
# Crear paneles para machos y hembras
ggplot(mhe, aes(TL, dN15)) +
geom_point() +
facet_wrap(~ sex, ncol = 2)
ggplot(mhe, aes(TL, dN15)) +
geom_point() +
facet_wrap(~sex, nrow = 2, strip.position = "top")
# Crear paneles para machos y hembras
ggplot(mhe, aes(TL, dN15)) +
geom_point() +
facet_wrap(~ sex, ncol = 2)	# sin usar par..., facet_wrap crea dos graficos en uno
ggplot(mhe, aes(TL, dN15)) +
geom_point() +
facet_wrap(~sex, nrow = 2, strip.position = "top")
ggplot(mhe, aes(TL, dN15)) +
geom_point() +
facet_wrap(~sex, nrow = 2, strip.position = "right")
ggplot(mhe, aes(TL, dN15)) +
geom_point() +
facet_wrap(~sex, nrow = 2, strip.position = "top")
ggplot(mhe, aes(TL, dN15)) +
geom_point() +
facet_wrap(~sex, nrow = 2, strip.position = "right")
ggplot(mhe, aes(TL, dN15)) +
geom_point() +
facet_wrap(~sex, nrow = 2, strip.position = "left")
ggplot(mhe, aes(TL, dN15)) +
geom_point() +
facet_wrap(~sex, nrow = 2, strip.position = "bottom")
# Crear múltiples gráficos
ggplot(mhe, aes(TL, dN15)) + geom_point() +
facet_wrap(~ depth)
ggplot(mhe, aes(TL, dN15)) +
geom_point() +
facet_wrap(~sex + month, nrow = 2, strip.position = "bottom")
# Agregar smoother
ggplot(mhe, aes(TL, dN15)) + geom_point() +
geom_smooth()
# Agregar línea sin el intervalo de confianza
ggplot(mhe, aes(TL, dN15)) + geom_point() +
geom_smooth(se = FALSE)
ggplot(mhe, aes(TL, dN15)) + geom_point() +
geom_smooth(se = TRUE, level = 0.50)
ggplot(mhe, aes(TL, dN15)) + geom_point() +
geom_smooth(se = T, level = 0.70)
ggplot(mhe, aes(TL, dN15)) + geom_point() +
geom_smooth(se = T, level = 0.70)
ggplot(mhe, aes(TL, dN15)) + geom_point() +
geom_smooth(se = T, level = 0.95)
# Agregar smoother con span bajo
ggplot(mhe, aes(TL, dN15)) +
geom_point() +
geom_smooth(span = 0.08)
# Agregar smoother con span alto
ggplot(mhe, aes(TL, dN15)) +
geom_point() +
geom_smooth(span = 3)
#
ggplot(mhe, aes(TL, dN15)) +
geom_point(size = 5, color = "blue",
aes(shape = sex)) +
geom_smooth(span = 0.8,
fill = "green", colour = "red4",
lty = 2, lwd = 3)
library(spatstat)
wd <- "/Datos/"
setwd(wd)
getwd()
carapa <- read.csv("Datos/Mapeamento_parcelas.csv", header = T, sep = ",")
head(carapa)
carapa1 <- read.csv("Datos/Mapeamento_parcelas1.csv", header = T, sep = ",")
head(carapa)
#
ggplot(mhe, aes(TL, dN15)) +
geom_point(size = 5, color = "blue",
aes(shape = sex)) +
geom_smooth(span = 0.8,
fill = "green", colour = "red4",
lty = 2, lwd = 3)
# Cambiar de theme
ggplot(mhe, aes(TL, dN15)) +
geom_point() +
geom_smooth(span = 0.8, fill = "red",
colour = "green",
lty = 2, lwd = 2.5) +
theme_light()
# Cambiar de theme
ggplot(mhe, aes(TL, dN15, color = sex)) +
geom_point(cex = 4) +
geom_smooth(span = 0.8, fill = "red",
colour = "green",
lty = 2, lwd = 2.5) +
theme_grey()
# Cambiar de theme
ggplot(mhe, aes(TL, dN15, color = sex)) +
geom_point(cex = 4) +
geom_smooth(span = 0.8, fill = "red",
colour = "green",
lty = 2, lwd = 2.5) +
theme_classic()
# Cambiar de theme
ggplot(mhe, aes(TL, dN15, color = sex)) +
geom_point(cex = 4) +
geom_smooth(span = 0.8, fill = "red",
colour = "green",
lty = 2, lwd = 2.5) +
theme_bw()
# Cargar paquetes
library(mgcv)
# Usar método gam
p <- ggplot(mhe, aes(TL, dN15)) +
geom_point() +
geom_smooth(method = "gam", formula = y ~ s(x)) +
labs(title = "Mustelus henlei") +
theme_classic()
# Usar método gam
p <- ggplot(mhe, aes(TL, dN15)) +
geom_point() +
geom_smooth(method = "gam", formula = y ~ s(x)) +	# medolo aditivo no lineal entre y en relacion a s(x)
labs(title = "Mustelus henlei") +
theme_classic()
p + theme(plot.title = element_text(hjust = 0.5))
p + theme(plot.title = element_text(hjust = 0.5,
size = 35,
face = "italic"))
p + theme(plot.title = element_text(hjust = 0.5))
p + theme(plot.title = element_text(hjust = 0.5,
size = 35,
face = "italic"))
p + theme(plot.title = element_text(hjust = 0.5,
size = 35,
face = "italic"))
# Usar método lm
p <- ggplot(mhe, aes(TL, dN15, color = sex, shape = sex)) +
geom_point(cex = 4.5, alpha = 0.6) +
geom_smooth(aes(color = sex, fill = sex), method = "lm") +
labs(title = "Mustelus henlei") +
theme_classic()
p + theme(plot.title = element_text(hjust = 0.5,
size = 15,
face = "italic"))
p + theme(plot.title = element_text(hjust = 0.5,
size = 15,
face = "italic"))
# Cargar librería
library(vcdExtra)
theme_set(theme_grey())
p <- ggplot(mhe, aes(TL, dN15, color = sex, shape = sex)) +
geom_point(cex = 4.5, alpha = 0.6) +
geom_smooth(aes(color = sex, fill = sex), method = "lm", show.legend = FALSE) +	# method lm es modelo lineal segun variables factor en fill (sin formlula)
labs(title = "Mustelus henlei") +
theme_classic()
p + theme(plot.title = element_text(hjust = 0.5,
size = 15,
face = "italic"))
# Cargar librería
library(vcdExtra)
theme_set(theme_grey())
# Datos
data(Titanicp)
head(Titanicp)
summarise(Titan)
summarise(Titancp)
summarise(Titanicp)
summarise(Titanicp)
summary(Titanicp)
dim(Titanicp)
str(Titanicp)
Titanicp$age
# Remover NA
Titanicp2 <- Titanicp[!is.na(Titanicp$age), ]
# Cerrar device
dev.off()
hist(Titanicp2$age)
# Crear variable de sobrevivencia numérica
Titanicp2$survived2 <- as.numeric(Titanicp2$survived) - 1
head(Titanicp2)
str(Titanicp2)
# Gráfico
p <- ggplot(Titanicp2, aes(x = age, y = survived2)) +
geom_smooth(method = "glm",
method.args=list(family="binomial"),
alpha = 0.2, linewidth = 2,
aes(color = sex, fill = sex))
p1 <- p + geom_point(aes(shape = sex, color = sex),
size = 2, alpha = 0.45) +
xlab("Edad") + ylab("Prob. Sobrevivencia")
p1
# Gráfico
p <- ggplot(Titanicp2, aes(x = age, y = survived2)) +
geom_smooth(method = "glm",
method.args=list(family="binomial"),
alpha = 0.2, linewidth = 2,
aes(color = sex, fill = sex))
p1 <- p + geom_point(aes(shape = sex, color = sex),
size = 2, alpha = 0.45) +
xlab("Edad") + ylab("Prob. Sobrevivencia")
#
p2 <- p + geom_point(aes(shape = sex, color = sex),
position = position_jitter(height = 0.09,
width = 0.09),
size = 2, alpha = 0.45) +
xlab("Edad") + ylab("Prob. Sobrevivencia")
p2
p1 + theme_minimal()
p2 + theme_classic()
View(Titanicp2)
# Crear variable de sobrevivencia numérica
levels(Titanicp2$survived)
p1 <- p + geom_point(aes(shape = sex, color = sex),
size = 2, alpha = 0.45) +
xlab("Edad") + ylab("Prob. Sobrevivencia")
# Gráfico
p <- ggplot(Titanicp2, aes(x = age, y = survived2)) +
geom_smooth(method = "glm",	# modelo lineal generalizado
method.args=list(family="binomial"), 	# de forma binomial por ser logica (curva logistica)
alpha = 0.2, linewidth = 2, 	# alpha da transparencia
aes(color = sex, fill = sex))
p
p1 <- p + geom_point(aes(shape = sex, color = sex),
size = 2, alpha = 0.45) +
xlab("Edad") + ylab("Prob. Sobrevivencia")
#
p2 <- p + geom_point(aes(shape = sex, color = sex),
position = position_jitter(height = 0.09,
width = 0.09),
size = 2, alpha = 0.45) +
xlab("Edad") + ylab("Prob. Sobrevivencia")
p2
p1
p2
p1 + theme_minimal()
p2 + theme_classic()
###
p <- ggplot(Titanicp2, aes(age, survived2,
color = sex, fill = sex)) +
geom_smooth(method="glm",
method.args=list(family="binomial"),
alpha = 0.2, size = 2, lty = 5)
###
p <- ggplot(Titanicp2, aes(age, survived2,
color = sex, fill = sex)) +
geom_smooth(method="glm",
method.args=list(family="binomial"),
alpha = 0.2, size = 2, lty = 5)
p
p1 <- p + scale_colour_manual(values = c("orange", "blue3"),
labels = c("Muj", "Homb")) +
scale_fill_manual(values = c("orange", "blue3"),
labels = c("Muj", "Homb"))
p1
library(spatstat)
wd <- "/Datos/"
setwd(wd)
carapa <- read.csv("Datos/Mapeamento_parcelas.csv", header = T, sep = ",")
wd <- "/Datos/"
setwd(wd)
getwd()
carapa <- read.csv("Datos/Mapeamento_parcelas.csv", header = T, sep = ",")
head(carapa)
carapa1 <- read.csv("Datos/Mapeamento_parcelas_corregido.csv", header = T, sep = ",")
head(carapa)
View(carapa1)
carapa1 <- read.csv("Datos/Mapeamento_parcelas_corregido.csv", header = T, sep = ";")
head(carapa)
View(carapa1)
carapa <- read.csv("Datos/Mapeamento_parcelas_corregido.csv", header = T, sep = ";")
head(carapa)
str(carapa)
View(carapa)
carapa <- as.factor(paste(carapa$Parc,
carapa$Sub.P))
carapa <- read.csv("Datos/Mapeamento_parcelas_corregido.csv", header = T, sep = ";")
head(carapa)
str(carapa)
carapa <- read.csv("Datos/Mapeamento_parcelas_corregido.csv", header = T, sep = ";", stringsAsFactors = TRUE)
head(carapa)
str(carapa)
carapa$Parc <- as.factor(carapa$Parc)
str(carapa)
carapa$Parc <- as.factor(carapa$Sub.P)
carapa$Prod. <- as.logical(carapa$Prod.)
str(carapa)
str(carapa)
summary(carapa)
View(carapa)
levels(carapa$Parc)
levels(carapa$Sub.P)
levels(carapa$Parc)
View(carapa)
<
carapa <- read.csv("Datos/Mapeamento_parcelas_corregido.csv", header = T, sep = ";", stringsAsFactors = TRUE)
head(carapa)
str(carapa)
carapa$Parc <- as.factor(carapa$Parc)
str(carapa)
levels(carapa$Parc)
carapa$Parc <- as.factor(carapa$Sub.P)
str(carapa)
carapa$Parc <- as.factor(carapa$Parc)
carapa$Parc <- as.factor(carapa$Parc)
carapa$Sub.P <- as.factor(carapa$Sub.P)
carapa$Prod. <- as.logical(carapa$Prod.)
str(carapa)
carapa$Parc <- as.factor(carapa$Parc)
str(carapa)
carapa <- read.csv("Datos/Mapeamento_parcelas_corregido.csv", header = T, sep = ";", stringsAsFactors = TRUE)
head(carapa)
carapa$Parc <- as.factor(carapa$Parc)
carapa$Sub.P <- as.factor(carapa$Sub.P)
carapa$Prod. <- as.logical(carapa$Prod.)
str(carapa)
summary(carapa)
levels(carapa$Parc)
levels(carapa$Sub.P)
levels(carapa$Prod)
logical.levels(carapa$Prod)
is.logical(carapa$Prod.)
View(carapa)
carapa <- read.csv("Datos/Mapeamento_parcelas_corregido.csv", header = T, sep = ";", stringsAsFactors = TRUE)
head(carapa)
carapa$Parc <- as.factor(carapa$Parc)
carapa$Sub.P <- as.factor(carapa$Sub.P)
carapa$Prod. <- as.logical(carapa$Prod.)
str(carapa)
summary(carapa)
