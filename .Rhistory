carapa$NumAr <- as.factor(carapa$NumAr)
str(carapa)
levels(carapa$NumAr)
summary(carapa)
# Crear secuencia y depositarla en vector "v.nuevo"
v.nuevo <- seq(1.3, 1024, l = 100)
v.nuevo
carapa$dbranch <- sample(seq(0, 4, l = 10000), size = length(carapa$DAP))
carapa$dbranch
carapa$dbranch <- sample(seq(0, 4, l = 4), size = length(carapa$DAP))
carapa$dbranch
carapa$dbranch <- sample(seq(0, 4, l = 4), size = length(carapa$DAP))
carapa$dbranch <- sample(seq(0, 4, l = 4, replace = TRUE), size = length(carapa$DAP))
carapa$dbranch <- sample(seq(0, 4, l = 4, replace = TRUE), size = length(carapa$DAP))
carapa$dbranch <- sample(seq(0, 4, l = 4), size = length(carapa$DAP), replace = TRUE)
carapa$dbranch
seq(0, 4, l = 4
v <- seq(0, 4, l = 4
v <- seq(0, 4, l = 4)
v
v <- seq(0, 4, l = 5)
v
carapa$dbranch <- sample(seq(0, 4, l = 5), size = length(carapa$DAP), replace = TRUE)
carapa$dbranch
carapa$arth <- sample(seq(0, 1, l = 2), size = length(carapa$DAP), replace = TRUE)
carapa$arth
carapa$arth <- as.logical(carapa$arth)
head(carapa)
carapa$vinec <- sample(seq(0, 4, l = 5), size = length(carapa$DAP), replace = TRUE)
carapa$vinec
carapa$height <- sample(seq(1,5, 18, l = 1000), size = length(carapa$DAP), replace = TRUE)
carapa$height <- sample(seq(1.5, 18, l = 1000), size = length(carapa$DAP), replace = TRUE)
carapa$height
head(carapa)
carapa$respr <- sample(seq(0, 1, l = 2), size = length(carapa$DAP), replace = TRUE)
carapa$respr
carapa$respr <- as.logical(carapa$respr)
head(carapa)
carapa$repr <- sample(c("flower", "acorn", "a_fall", "n_repr"), size = length(carapa$DAP), replace = TRUE)
carapa$repr
head(carapa)
carapa$leafq <- sample(seq(0, 4, l = 5), size = length(carapa$DAP), replace = TRUE)
carapa$leafq
carapa$cank <- sample(seq(0, 1, l = 2), size = length(carapa$DAP), replace = TRUE)
carapa$cank
carapa$cank <- as.logical(carapa$cank)
head(carapa)
randv <- function( x, y, z) {
sample(seq(x, y, l = z), size = length(carapa$DAP), replace = TRUE)
}
randv(0, 4, 5)
carapa$ejemplo <- randv(0, 4, 5)
head(carapa)
carapa$dbranch <- randv(0, 4, 5)
carapa$dbranch
head(carapa)
carapa$dbranch <- randv(0, 4, 5)
carapa$dbranch
head(carapa)
carapa$arth <- randv(0, 1, 2)
carapa$arth <- randv(0, 1, 2)
head(carapa)
carapa$arth <- as.logical(carapa$arth)
head(carapa)
carapa$arth <- randv(0, 1, 2)
carapa$arth <- randv(0, 1, 2) + as.logical(carapa$arth)
head(carapa)
carapa$arth <- randv(0, 1, 2), as.logical(carapa$arth)
carapa$arth <- c(randv(0, 1, 2), as.logical(carapa$arth))
carapa <- read.csv("Datos/Mapeamento_parcelas_corregido.csv",
header = T,
sep = ";",
stringsAsFactors = TRUE)
head(carapa)
str(carapa)
carapa$Parc <- as.factor(carapa$Parc)
carapa$Sub.P <- as.factor(carapa$Sub.P)
carapa$Prod. <- as.logical(carapa$Prod.)
carapa$NumAr <- as.factor(carapa$NumAr)
str(carapa)
summary(carapa)
randv <- function( x, y, z) {
sample(seq(x, y, l = z), size = length(carapa$DAP), replace = TRUE)
}
carapa$dbranch <- randv(0, 4, 5)
carapa$arth <- randv(0, 1, 2)
carapa$arth <- as.logical(carapa$arth)
carapa$vinec <- randv(0, 4, 5)
carapa$height <- randv(1.5, 18, 1000)
carapa$respr <- randv(0, 1, 2)
carapa$respr <- as.logical(carapa$respr)
carapa$repr <- sample(c("flower", "acorn", "a_fall", "n_repr"), size = length(carapa$DAP), replace = TRUE)
carapa$repr
carapa$leafq <- randv(0, 4, 5)
carapa$cank <- randv(0, 1, 2)
carapa$cank <- as.logical(carapa$cank)
head(carapa)
carapa$cank <- as.factor(carapa$cank)
carapa$repr <- as.factor(carapa$repr)
head(carapa)
str(carapa)
carapa$vinec <- as.factor(carapa$vinec)
str(carapa)
carapa$leafq <- as.factor(carapa$leafq)
str(carapa)
carapa$cank <- as.logical(carapa$cank)
str(carapa)
head(carapa)
c(carapa$Parc, carapa$Sub.P) <- as.factor(c(carapa$Parc, carapa$Sub.P))
library(dplyr)
carapa <- carapa %>% mutate_at(c("Parc", "Sub.P"), as.numeric)
str(carapa)
carapa <- carapa %>% mutate_at(c("Parc", "Sub.P"), as.factor)
str(carapa)
carapa <- carapa %>% mutate_at(c("Parc",
"Sub.P",
"NumAr",
"vinec",
"repr",
"leafq"),
as.factor)
str(carapa)
carapa <- carapa %>% mutate_at(c("Prod",
"arth",
"respr",
"cank"),
as.logical)
carapa <- carapa %>% mutate_at(c("Parc",
"Sub.P",
"NumAr",
"vinec",
"repr",
"leafq"),
as.factor)
carapa$Prod. <- as.logical(carapa$Prod.)
str(carapa)
summary(carapa)
randv <- function( x, y, z) {
sample(seq(x, y, l = z), size = length(carapa$DAP), replace = TRUE)
}
carapa$dbranch <- randv(0, 4, 5)
carapa$arth <- randv(0, 1, 2)
carapa$arth <- as.logical(carapa$arth)
carapa$vinec <- randv(0, 4, 5)
carapa$vinec <- as.factor(carapa$vinec)
carapa$height <- randv(1.5, 18, 1000)
carapa$respr <- randv(0, 1, 2)
carapa$respr <- as.logical(carapa$respr)
carapa$repr <- sample(c("flower", "acorn", "a_fall", "n_repr"), size = length(carapa$DAP), replace = TRUE)
carapa$repr <- as.factor(carapa$repr)
carapa$leafq <- randv(0, 4, 5)
carapa$leafq <- as.factor(carapa$leafq)
carapa$cank <- randv(0, 1, 2)
carapa$cank <- as.logical(carapa$cank)
head(carapa)
str(carapa)
carapa <- carapa %>% mutate_at(c("Prod",
"arth",
"respr",
"cank"),
as.logical)
carapa <- carapa %>% mutate_at(c("Prod",
"arth",
"repr",
"cank"),
as.logical)
carapa <- carapa %>% mutate_at(c("Prod.",
"arth",
"repr",
"cank"),
as.logical)
carapa <- read.csv("Datos/Mapeamento_parcelas_corregido.csv",
header = T,
sep = ";",
stringsAsFactors = TRUE)
head(carapa)
# Funcion crear variables
randv <- function( x, y, z) {
sample(seq(x, y, l = z), size = length(carapa$DAP), replace = TRUE)
}
carapa$dbranch <- randv(0, 4, 5) # ramas muertas
carapa$arth <- randv(0, 1, 2) # dano por artropodos
carapa$vinec <- randv(0, 4, 5) # cobertura enredaderas
carapa$height <- randv(1.5, 18, 1000) # altura arbol
carapa$respr <- randv(0, 1, 2) # rebrote
carapa$repr <- sample(c("flower", # estatus reproductivo
"acorn",
"a_fall",
"n_repr"),
size = length(carapa$DAP),
replace = TRUE)
carapa$leafq <- randv(0, 4, 5) # carga de hojas
carapa$cank <- randv(0, 1, 2) # cancros
# convertir a factor
carapa <- carapa %>% dpylr::mutate_at(c("Parc",
"Sub.P",
"NumAr",
"vinec",
"repr",
"leafq"),
as.factor)
## Librerias
library(dplyr)
# convertir a factor
carapa <- carapa %>% mutate_at(c("Parc",
"Sub.P",
"NumAr",
"vinec",
"repr",
"leafq"),
as.factor)
# convertir a logicos
carapa <- carapa %>% mutate_at(c("Prod.",
"arth",
"repr",
"cank"),
as.logical)
head(carapa)
# convertir a factor
carapa <- carapa %>% mutate_at(c("Parc",
"Sub.P",
"NumAr",
"vinec",
"repr",
"leafq"),
as.factor)
# convertir a logicos
carapa <- carapa %>% mutate_at(c("Prod.",
"arth",
"respr",
"cank"),
as.logical)
head(carapa)
carapa$repr <- sample(c("flower", # estatus reproductivo
"acorn",
"a_fall",
"n_repr"),
size = length(carapa$DAP),
replace = TRUE)
head(carapa)
# convertir a factor
carapa <- carapa %>% mutate_at(c("Parc",
"Sub.P",
"NumAr",
"vinec",
"repr",
"leafq"),
as.factor)
head(carapa)
str(carapa)
## Librerias
library(dplyr)
### Cargar set de datos
carapa <- read.csv("Datos/Mapeamento_parcelas_corregido.csv",
header = T,
sep = ";",
stringsAsFactors = TRUE)
head(carapa)
# Funcion crear variables
randv <- function( x, y, z) {
sample(seq(x, y, l = z), size = length(carapa$DAP), replace = TRUE)
}
carapa$dbranch <- randv(0, 4, 5) # ramas muertas
carapa$vinec <- randv(0, 4, 5) # cobertura enredaderas
carapa$leafq <- randv(0, 4, 5) # carga de hojas
carapa$arth <- randv(0, 1, 2) # dano por artropodos
carapa$respr <- randv(0, 1, 2) # rebrote
carapa$cank <- randv(0, 1, 2) # cancros
carapa$height <- randv(1.5, 18, 1000) # altura arbol
carapa$repr <- sample(c("flower", # estatus reproductivo
"acorn",
"a_fall",
"n_repr"),
size = length(carapa$DAP),
replace = TRUE)
# convertir a factor
carapa <- carapa %>% mutate_at(c("Parc",
"Sub.P",
"NumAr",
"vinec",
"repr",
"leafq"),
as.factor)
# convertir a logicos
carapa <- carapa %>% mutate_at(c("Prod.",
"arth",
"respr",
"cank"),
as.logical)
head(carapa)
str(carapa)
View(carapa)
carapa <- read.csv(".Datos/Mapeamento_parcelas_corregido.csv",
header = T,
sep = ";",
stringsAsFactors = TRUE)
wd()
getwd()
### Cargar set de datos
carapa <- read.csv("Datos/Mapeamento_parcelas_corregido.csv",
header = T,
sep = ";",
stringsAsFactors = TRUE)
carapa <- read.csv(".Datos/Mapeamento_parcelas_corregido.csv",
header = T,
sep = ";",
stringsAsFactors = TRUE)
carapa <- read.csv("Datos/Mapeamento_parcelas_corregido.csv",
header = T,
sep = ";",
stringsAsFactors = TRUE)
carapa <- read.csv("..Datos/Mapeamento_parcelas_corregido.csv",
header = T,
sep = ";",
stringsAsFactors = TRUE)
carapa <- read.csv("/..Datos/Mapeamento_parcelas_corregido.csv",
header = T,
sep = ";",
stringsAsFactors = TRUE)
carapa <- read.csv("/.Datos/Mapeamento_parcelas_corregido.csv",
header = T,
sep = ";",
stringsAsFactors = TRUE)
carapa <- read.csv("/Datos/Mapeamento_parcelas_corregido.csv",
header = T,
sep = ";",
stringsAsFactors = TRUE)
carapa <- read.csv("Datos/Mapeamento_parcelas_corregido.csv",
header = T,
sep = ";",
stringsAsFactors = TRUE)
### Cargar set de datos
carapa <- read.csv("/Datos/Mapeamento_parcelas_corregido.csv",
header = T,
sep = ";",
stringsAsFactors = TRUE)
carapa <- read.csv("/Datos/Mapeamento_parcelas_corregido.csv",
header = T,
sep = ";",
stringsAsFactors = TRUE)
carapa <- read.csv("/Datos/Mapeamento_parcelas_corregido.csv",
header = T,
sep = ";",
stringsAsFactors = TRUE)
carapa <- read.csv("./Datos/Mapeamento_parcelas_corregido.csv",
header = T,
sep = ";",
stringsAsFactors = TRUE)
carapa <- read.csv("../Datos/Mapeamento_parcelas_corregido.csv",
header = T,
sep = ";",
stringsAsFactors = TRUE)
head(carapa)
View(carapa)
carapa <- read.csv("Datos/Mapeamento_parcelas_corregido.csv", header = T, sep = ";", stringsAsFactors = TRUE)
head(carapa)
carapa$Parc <- as.factor(carapa$Parc)
carapa$Sub.P <- as.factor(carapa$Sub.P)
carapa$Prod. <- as.logical(carapa$Prod.)
str(carapa)
summary(carapa)
library(spatstat)
x = redwood
plot(x)
density(x)
d = density(x)
d
plot(d)
x
d = density(x, 1)
plot(d)
d = density(x, 0.1)
plot(d)
d = density(x, 0.01)
plot(d)
Y= shapley
Y
View(Y)
plor(density(y)))
plot(density(y)))
plot(density(y))
plot(density(Y))
plot(density(Y, 0.1))
plot(density(Y, 0.01))
plot(carapa)
plot(carapa)
plot(carapa$y+carapa$x)
plot(carapa$y+carapa$x_rev)
plot(carapa$y+carapa$x)
plot(carapa$y+carapa$x_rev)
plot(density(carapa$y+carapa$x_rev))
plot(density(Y, 0.01))
plot(density(carapa$y+carapa$x_rev))
plot(density(carapa$y+carapa$x_rev, 0.01))
plot(spatspat::density(carapa$y+carapa$x_rev, 0.01))
library(spatstat)
plot(spatstat::density(carapa$y+carapa$x_rev, 0.01))
plot(density(carapa$y+carapa$x_rev, 0.01))
x= carapa$x_rev + carapa$y
x
X <- ppp(carapa$x_rev, carapa$y)
X <- ppp(carapa$x_rev, carapa$y, window = owin(c(0,1000), c(0,1000))
X <- ppp(carapa$x_rev, carapa$y, window = owin(c(0,1000), c(0,1000)))
X <- ppp(carapa$x_rev, carapa$y, window = owin(c(0,1000), c(0,1000)))
DD = density(X)
plot(X)
plot(DD)
X <- ppp(carapa$x_rev, carapa$y, window = owin(c(0,400), c(0,400)))
DD = density(X)
plot(X)
plot(DD)
plot(X)
plot(DD)
plot(DD + carapa$Parc)
plot(DD, carapa$Parc)
plot(DD, carapa$Parc)
plot(DD)
plot(DD), facet_wrap(carapa$Parc)
library(ggplot2)
p <- ggplot(carapa, aes(carapa$x_rev, carapa$y))
p
p <- ggplot(carapa, aes(carapa$x_rev, carapa$y)) +
geom_point()
p <- ggplot(carapa, aes(carapa$x_rev, carapa$y)) +
geom_point()
p
p <- ggplot(carapa, aes(carapa$x_rev, carapa$y)) +
geom_point() +
facet_wrap(carapa$Parc)
p
p <- ggplot(carapa, aes(x_rev, y)) +
geom_point() +
facet_wrap(carapa$Parc)
p
# Gráficos de contornos y densidades
head(faithful)	# graficos de calor o densidad "espacial"
ggplot(faithfuld, aes(eruptions, waiting)) +
geom_contour(aes(z = density, colour = ..level..))
ggplot(faithfuld, aes(eruptions, waiting)) +
geom_raster(aes(fill = density))
ggplot(faithfuld, aes(eruptions, waiting)) +
geom_contour(aes(z = density, colour = ..level..))
jj <- ggplot(carapa, aes(x_rev, y)) +
geom_contour(aes(z = density, colour = ..level..))
jj
jj <- ggplot(carapa, aes(x_rev, y)) +
geom_contour()
jj
head(faithful)
ggplot(faithfuld, aes(eruptions, waiting)) +
geom_contour(aes(z = density, colour = ..level..))
ggplot(faithfuld, aes(eruptions, waiting)) +
geom_raster(aes(fill = density))
jp <- ggplot(carapa, aes(x_rev, y)) +
geom_raster(aes(fill = density))
jp
jp <- ggplot(carapa, aes(x_rev, y)) +
geom_raster(aes(fill = density)) +
facet_wrap(carapa$Parc)
jp
jp <- ggplot(carapa, aes(x_rev, y)) +
geom_raster(aes(fill = density)) +
facet_wrap(carapa$Parc)
ggplot(faithfuld, aes(eruptions, waiting)) +
geom_contour(aes(z = density, colour = ..level..))
ggplot(faithfuld, aes(eruptions, waiting)) +
geom_point()
# Gráficos de contornos y densidades
head(faithful)	# graficos de calor o densidad "espacial"
View(faithful)
jj <- ggplot(carapa, aes(x_rev, y)) +
geom_contour(aes(z = density, colour = ..level..))
jj
jj <- ggplot(carapa, aes(x_rev, y)) +
geom_point() +
geom_contour(aes(z = density, colour = ..level..))
jj
ggplot(carapa, aes(x_rev, y)) +
geom_point() +
ggplot(carapa, aes(x_rev, y)) +
geom_point()
ggplot(carapa, aes(x_rev, y)) +
geom_point()
jj <- ggplot(carapa, aes(x_rev, y)) +
geom_point() +
facet_wrap(carapa$Parc) +
geom_contour(aes(z = density, colour = ..level..))
jj
jj <- ggplot(carapa, aes(x_rev, y)) +
geom_point() +
facet_wrap(carapa$Parc) +
geom_contour(aes(z = density))
jj
jj <- ggplot(carapa, aes(x_rev, y)) +
geom_point() +
facet_wrap(carapa$Parc) +
geom_contour()
jj
ggplot(carapa, aes(x_rev, y)) +
geom_point() +
facet_wrap(carapa$Parc) +
geom_contour(aes(z = x_rev))
ggplot(carapa, aes(x_rev, y)) +
geom_point() +
geom_contour(aes(z = x_rev)) +
facet_wrap(carapa$Parc)
ggplot(carapa, aes(x_rev, y)) +
geom_contour(aes(z = x_rev)) +
facet_wrap(carapa$Parc)
ggplot(carapa, aes(x_rev, y)) +
geom_contour(aes(z = density)) +
facet_wrap(carapa$Parc)
