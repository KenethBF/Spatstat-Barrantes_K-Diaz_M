"arth",
"respr",
"cank"),
as.logical)
carapa <- carapa %>% mutate_at(c("Prod",
"arth",
"repr",
"cank"),
as.logical)
carapa <- carapa %>% mutate_at(c("Prod.",
"arth",
"repr",
"cank"),
as.logical)
carapa <- read.csv("Datos/Mapeamento_parcelas_corregido.csv",
header = T,
sep = ";",
stringsAsFactors = TRUE)
head(carapa)
# Funcion crear variables
randv <- function( x, y, z) {
sample(seq(x, y, l = z), size = length(carapa$DAP), replace = TRUE)
}
carapa$dbranch <- randv(0, 4, 5) # ramas muertas
carapa$arth <- randv(0, 1, 2) # dano por artropodos
carapa$vinec <- randv(0, 4, 5) # cobertura enredaderas
carapa$height <- randv(1.5, 18, 1000) # altura arbol
carapa$respr <- randv(0, 1, 2) # rebrote
carapa$repr <- sample(c("flower", # estatus reproductivo
"acorn",
"a_fall",
"n_repr"),
size = length(carapa$DAP),
replace = TRUE)
carapa$leafq <- randv(0, 4, 5) # carga de hojas
carapa$cank <- randv(0, 1, 2) # cancros
# convertir a factor
carapa <- carapa %>% dpylr::mutate_at(c("Parc",
"Sub.P",
"NumAr",
"vinec",
"repr",
"leafq"),
as.factor)
## Librerias
library(dplyr)
# convertir a factor
carapa <- carapa %>% mutate_at(c("Parc",
"Sub.P",
"NumAr",
"vinec",
"repr",
"leafq"),
as.factor)
# convertir a logicos
carapa <- carapa %>% mutate_at(c("Prod.",
"arth",
"repr",
"cank"),
as.logical)
head(carapa)
# convertir a factor
carapa <- carapa %>% mutate_at(c("Parc",
"Sub.P",
"NumAr",
"vinec",
"repr",
"leafq"),
as.factor)
# convertir a logicos
carapa <- carapa %>% mutate_at(c("Prod.",
"arth",
"respr",
"cank"),
as.logical)
head(carapa)
carapa$repr <- sample(c("flower", # estatus reproductivo
"acorn",
"a_fall",
"n_repr"),
size = length(carapa$DAP),
replace = TRUE)
head(carapa)
# convertir a factor
carapa <- carapa %>% mutate_at(c("Parc",
"Sub.P",
"NumAr",
"vinec",
"repr",
"leafq"),
as.factor)
head(carapa)
str(carapa)
## Librerias
library(dplyr)
### Cargar set de datos
carapa <- read.csv("Datos/Mapeamento_parcelas_corregido.csv",
header = T,
sep = ";",
stringsAsFactors = TRUE)
head(carapa)
# Funcion crear variables
randv <- function( x, y, z) {
sample(seq(x, y, l = z), size = length(carapa$DAP), replace = TRUE)
}
carapa$dbranch <- randv(0, 4, 5) # ramas muertas
carapa$vinec <- randv(0, 4, 5) # cobertura enredaderas
carapa$leafq <- randv(0, 4, 5) # carga de hojas
carapa$arth <- randv(0, 1, 2) # dano por artropodos
carapa$respr <- randv(0, 1, 2) # rebrote
carapa$cank <- randv(0, 1, 2) # cancros
carapa$height <- randv(1.5, 18, 1000) # altura arbol
carapa$repr <- sample(c("flower", # estatus reproductivo
"acorn",
"a_fall",
"n_repr"),
size = length(carapa$DAP),
replace = TRUE)
# convertir a factor
carapa <- carapa %>% mutate_at(c("Parc",
"Sub.P",
"NumAr",
"vinec",
"repr",
"leafq"),
as.factor)
# convertir a logicos
carapa <- carapa %>% mutate_at(c("Prod.",
"arth",
"respr",
"cank"),
as.logical)
head(carapa)
str(carapa)
View(carapa)
carapa <- read.csv(".Datos/Mapeamento_parcelas_corregido.csv",
header = T,
sep = ";",
stringsAsFactors = TRUE)
wd()
getwd()
### Cargar set de datos
carapa <- read.csv("Datos/Mapeamento_parcelas_corregido.csv",
header = T,
sep = ";",
stringsAsFactors = TRUE)
carapa <- read.csv(".Datos/Mapeamento_parcelas_corregido.csv",
header = T,
sep = ";",
stringsAsFactors = TRUE)
carapa <- read.csv("Datos/Mapeamento_parcelas_corregido.csv",
header = T,
sep = ";",
stringsAsFactors = TRUE)
carapa <- read.csv("..Datos/Mapeamento_parcelas_corregido.csv",
header = T,
sep = ";",
stringsAsFactors = TRUE)
carapa <- read.csv("/..Datos/Mapeamento_parcelas_corregido.csv",
header = T,
sep = ";",
stringsAsFactors = TRUE)
carapa <- read.csv("/.Datos/Mapeamento_parcelas_corregido.csv",
header = T,
sep = ";",
stringsAsFactors = TRUE)
carapa <- read.csv("/Datos/Mapeamento_parcelas_corregido.csv",
header = T,
sep = ";",
stringsAsFactors = TRUE)
carapa <- read.csv("Datos/Mapeamento_parcelas_corregido.csv",
header = T,
sep = ";",
stringsAsFactors = TRUE)
### Cargar set de datos
carapa <- read.csv("/Datos/Mapeamento_parcelas_corregido.csv",
header = T,
sep = ";",
stringsAsFactors = TRUE)
carapa <- read.csv("/Datos/Mapeamento_parcelas_corregido.csv",
header = T,
sep = ";",
stringsAsFactors = TRUE)
carapa <- read.csv("/Datos/Mapeamento_parcelas_corregido.csv",
header = T,
sep = ";",
stringsAsFactors = TRUE)
carapa <- read.csv("./Datos/Mapeamento_parcelas_corregido.csv",
header = T,
sep = ";",
stringsAsFactors = TRUE)
carapa <- read.csv("../Datos/Mapeamento_parcelas_corregido.csv",
header = T,
sep = ";",
stringsAsFactors = TRUE)
head(carapa)
View(carapa)
carapa <- read.csv("Datos/Mapeamento_parcelas_corregido.csv", header = T, sep = ";", stringsAsFactors = TRUE)
head(carapa)
carapa$Parc <- as.factor(carapa$Parc)
carapa$Sub.P <- as.factor(carapa$Sub.P)
carapa$Prod. <- as.logical(carapa$Prod.)
str(carapa)
summary(carapa)
library(spatstat)
x = redwood
plot(x)
density(x)
d = density(x)
d
plot(d)
x
d = density(x, 1)
plot(d)
d = density(x, 0.1)
plot(d)
d = density(x, 0.01)
plot(d)
Y= shapley
Y
View(Y)
plor(density(y)))
plot(density(y)))
plot(density(y))
plot(density(Y))
plot(density(Y, 0.1))
plot(density(Y, 0.01))
plot(carapa)
plot(carapa)
plot(carapa$y+carapa$x)
plot(carapa$y+carapa$x_rev)
plot(carapa$y+carapa$x)
plot(carapa$y+carapa$x_rev)
plot(density(carapa$y+carapa$x_rev))
plot(density(Y, 0.01))
plot(density(carapa$y+carapa$x_rev))
plot(density(carapa$y+carapa$x_rev, 0.01))
plot(spatspat::density(carapa$y+carapa$x_rev, 0.01))
library(spatstat)
plot(spatstat::density(carapa$y+carapa$x_rev, 0.01))
plot(density(carapa$y+carapa$x_rev, 0.01))
x= carapa$x_rev + carapa$y
x
X <- ppp(carapa$x_rev, carapa$y)
X <- ppp(carapa$x_rev, carapa$y, window = owin(c(0,1000), c(0,1000))
X <- ppp(carapa$x_rev, carapa$y, window = owin(c(0,1000), c(0,1000)))
X <- ppp(carapa$x_rev, carapa$y, window = owin(c(0,1000), c(0,1000)))
DD = density(X)
plot(X)
plot(DD)
X <- ppp(carapa$x_rev, carapa$y, window = owin(c(0,400), c(0,400)))
DD = density(X)
plot(X)
plot(DD)
plot(X)
plot(DD)
plot(DD + carapa$Parc)
plot(DD, carapa$Parc)
plot(DD, carapa$Parc)
plot(DD)
plot(DD), facet_wrap(carapa$Parc)
library(ggplot2)
p <- ggplot(carapa, aes(carapa$x_rev, carapa$y))
p
p <- ggplot(carapa, aes(carapa$x_rev, carapa$y)) +
geom_point()
p <- ggplot(carapa, aes(carapa$x_rev, carapa$y)) +
geom_point()
p
p <- ggplot(carapa, aes(carapa$x_rev, carapa$y)) +
geom_point() +
facet_wrap(carapa$Parc)
p
p <- ggplot(carapa, aes(x_rev, y)) +
geom_point() +
facet_wrap(carapa$Parc)
p
# Gráficos de contornos y densidades
head(faithful)	# graficos de calor o densidad "espacial"
ggplot(faithfuld, aes(eruptions, waiting)) +
geom_contour(aes(z = density, colour = ..level..))
ggplot(faithfuld, aes(eruptions, waiting)) +
geom_raster(aes(fill = density))
ggplot(faithfuld, aes(eruptions, waiting)) +
geom_contour(aes(z = density, colour = ..level..))
jj <- ggplot(carapa, aes(x_rev, y)) +
geom_contour(aes(z = density, colour = ..level..))
jj
jj <- ggplot(carapa, aes(x_rev, y)) +
geom_contour()
jj
head(faithful)
ggplot(faithfuld, aes(eruptions, waiting)) +
geom_contour(aes(z = density, colour = ..level..))
ggplot(faithfuld, aes(eruptions, waiting)) +
geom_raster(aes(fill = density))
jp <- ggplot(carapa, aes(x_rev, y)) +
geom_raster(aes(fill = density))
jp
jp <- ggplot(carapa, aes(x_rev, y)) +
geom_raster(aes(fill = density)) +
facet_wrap(carapa$Parc)
jp
jp <- ggplot(carapa, aes(x_rev, y)) +
geom_raster(aes(fill = density)) +
facet_wrap(carapa$Parc)
ggplot(faithfuld, aes(eruptions, waiting)) +
geom_contour(aes(z = density, colour = ..level..))
ggplot(faithfuld, aes(eruptions, waiting)) +
geom_point()
# Gráficos de contornos y densidades
head(faithful)	# graficos de calor o densidad "espacial"
View(faithful)
jj <- ggplot(carapa, aes(x_rev, y)) +
geom_contour(aes(z = density, colour = ..level..))
jj
jj <- ggplot(carapa, aes(x_rev, y)) +
geom_point() +
geom_contour(aes(z = density, colour = ..level..))
jj
ggplot(carapa, aes(x_rev, y)) +
geom_point() +
ggplot(carapa, aes(x_rev, y)) +
geom_point()
ggplot(carapa, aes(x_rev, y)) +
geom_point()
jj <- ggplot(carapa, aes(x_rev, y)) +
geom_point() +
facet_wrap(carapa$Parc) +
geom_contour(aes(z = density, colour = ..level..))
jj
jj <- ggplot(carapa, aes(x_rev, y)) +
geom_point() +
facet_wrap(carapa$Parc) +
geom_contour(aes(z = density))
jj
jj <- ggplot(carapa, aes(x_rev, y)) +
geom_point() +
facet_wrap(carapa$Parc) +
geom_contour()
jj
ggplot(carapa, aes(x_rev, y)) +
geom_point() +
facet_wrap(carapa$Parc) +
geom_contour(aes(z = x_rev))
ggplot(carapa, aes(x_rev, y)) +
geom_point() +
geom_contour(aes(z = x_rev)) +
facet_wrap(carapa$Parc)
ggplot(carapa, aes(x_rev, y)) +
geom_contour(aes(z = x_rev)) +
facet_wrap(carapa$Parc)
ggplot(carapa, aes(x_rev, y)) +
geom_contour(aes(z = density)) +
facet_wrap(carapa$Parc)
carapa <- read.csv("Datos/Mapeamento_parcelas_corregido.csv", header = T, sep = ";", stringsAsFactors = TRUE)
head(carapa)
View(carapa)
carapa$Parc <- plot(carapa$y+carapa$x_rev) as.factor(carapa$Parc)
carapa$Parc <- plot(carapa$y + carapa$x_rev) as.factor(carapa$Parc)
carapa$Parc <- as.factor(carapa$Parc)
carapa$Sub.P <- as.factor(carapa$Sub.P)
carapa$Prod. <- as.logical(carapa$Prod.)
str(carapa)
summary(carapa)
library(spatstat)
x = redwood # libreria de r
plot(x) # graficar libreria
d = density(x) # densidad de nube de puntos en rectangulo
plot(d) # grafico de calor-densidad
d = density(x, 0.1) # segundo argumento es resolucion de densidad: sigma
plot(d)
Y= shapley
plot(density(Y, 0.01))
plot(carapa$y+carapa$x)
plot(carapa$y+carapa$x_rev)
X <- ppp(carapa$x_rev, carapa$y, window = owin(c(0,400), c(0,400))) # dar formato de datos a coordenadas
DD = density(X)
plot(X)
plot(DD)
library(ggplot2)
p <- ggplot(carapa, aes(x_rev, y)) +
geom_point() +
facet_wrap(carapa$Parc)
p
ggplot(carapa, aes(x_rev, y)) +
geom_contour(aes(z = density)) +
facet_wrap(carapa$Parc)
jp <- ggplot(carapa, aes(x_rev, y)) +
geom_raster(aes(fill = density)) +
facet_wrap(carapa$Parc)
jp
# Si el patrón de distribución espacial es aleatorio entonces R=1. Si es agregado entonces R tiende a 0 y si el patrón es uniforme R aproxima a un límite de 2.15. Para poder probar estadísticamente si R es diferente de 1 se utiliza una prueba Z.
carapa1 <- carapa[carapa$Parc == "1", ]
View(carapa1)
coord1 <- ppp(carapa1$x_rev, carapa1$y, window = owin(c(0,400), c(0,400)))
K <- Kest(coord1)
K
plot(K)
# Si el patrón de distribución espacial es aleatorio entonces R=1. Si es agregado entonces R tiende a 0 y si el patrón es uniforme R aproxima a un límite de 2.15. Para poder probar estadísticamente si R es diferente de 1 se utiliza una prueba Z.
carapa1 <- carapa[carapa$Parc == "1", ]
coord1 <- ppp(carapa1$x_rev, carapa1$y, window = owin(c(0,400), c(0,400)))
K1 <- Kest(coord1)
K1
plot(K1)
carapa2 <- carapa[carapa$Parc == "2", ]
coord2 <- ppp(carapa2$x_rev, carapa2$y, window = owin(c(0,400), c(0,400)))
K2 <- Kest(coord2)
K2
plot(K2)
carapa3 <- carapa[carapa$Parc == "3", ]
coord3 <- ppp(carapa3$x_rev, carapa3$y, window = owin(c(0,400), c(0,400)))
K3 <- Kest(coord3)
K3
plot(K3)
carapa4 <- carapa[carapa$Parc == "4", ]
coord4 <- ppp(carapa4$x_rev, carapa4$y, window = owin(c(0,400), c(0,400)))
K4 <- Kest(coord4)
K4
plot(K4)
K4
summary(K4)
K4
summarise(K4)
summary(K4)
coord1 <- ppp(carapa$x_rev, carapa$y, window = owin(c(0,400), c(0,400)))
coord <- ppp(carapa$x_rev, carapa$y, window = owin(c(0,400), c(0,400)))
coord <- ppp(carapa$x_rev, carapa$y, window = owin(c(0,400), c(0,400)))
K <- Kest(coord)
K
plot(K)
carapa1 <- carapa[carapa$Parc == "1", ]
coord1 <- ppp(carapa1$x_rev, carapa1$y, window = owin(c(0,400), c(0,400)))
K1 <- Kest(coord1)
K1
plot(K1)
carapa2 <- carapa[carapa$Parc == "2", ]
coord2 <- ppp(carapa2$x_rev, carapa2$y, window = owin(c(0,400), c(0,400)))
K2 <- Kest(coord2)
K2
plot(K2)
carapa3 <- carapa[carapa$Parc == "3", ]
coord3 <- ppp(carapa3$x_rev, carapa3$y, window = owin(c(0,400), c(0,400)))
K3 <- Kest(coord3)
K3
plot(K3)
carapa4 <- carapa[carapa$Parc == "4", ]
coord4 <- ppp(carapa4$x_rev, carapa4$y, window = owin(c(0,400), c(0,400)))
K4 <- Kest(coord4)
K4
plot(K4)
carapa4
View(carapa)
carapa4 <- carapa[carapa$Parc == "4", ]
coord4 <- ppp(carapa4$x_rev, carapa4$y, window = owin(c(0,400), c(0,400)))
K4 <- Kest(coord4)
K4
plot(K4)
plot(K2)
plot(K3)
plot(K1)
#### solo reproductivos
adultos <- carapa[carapa$DAP < "20", ]
adultos
View(adultos)
#### solo reproductivos
adultos <- carapa[carapa$DAP > "20", ]
View(adultos)
adults.coord <- ppp(adultos$x_rev, adultos$y, window = owin(c(0,400), c(0,400)))
Ka <- Kest(adults.coord)
Ka
plot(Ka)
plot(K)
# parcela 1
adultos1 <- adultos[adultos$Parc > "1", ]
# parcela 1
adultos1 <- adultos[adultos$Parc == "1", ]
adults.coord1 <- ppp(adultos1$x_rev, adultos1$y, window = owin(c(0,400), c(0,400)))
Ka1 <- Kest(adults.coord1)
Ka1
plot(Ka1)
plot(K1)
# parcela 2
adultos2 <- adultos[adultos$Parc == "2", ]
adults.coord2 <- ppp(adultos2$x_rev, adultos2$y, window = owin(c(0,400), c(0,400)))
Ka2 <- Kest(adults.coord2)
Ka2
plot(Ka2)
plot(K2)
plot(Ka2)
# parcela 3
adultos3 <- adultos[adultos$Parc == "3", ]
adults.coord3 <- ppp(adultos3$x_rev, adultos3$y, window = owin(c(0,400), c(0,400)))
Ka3 <- Kest(adults.coord3)
Ka3
plot(Ka3)
plot(K3)
# parcela 4
adultos4 <- adultos[adultos$Parc == "4", ]
adults.coord4 <- ppp(adultos4$x_rev, adultos4$y, window = owin(c(0,400), c(0,400)))
Ka4 <- Kest(adults.coord4)
Ka4
plot(Ka4)
plot(K4)
head(as.data.frame(Ka4))
head(as.data.frame(Ka3))
plot(Ka4)
head(as.data.frame(Ka4))
View(Ka2)
View(Ka4)
View(Ka3)
View(Ka2)
