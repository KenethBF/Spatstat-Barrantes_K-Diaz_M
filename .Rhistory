library(ggplot2)
# Las 4 parcelas
coord <- ppp(carapa$x_rev, carapa$y, # asignación de formato espacial a columnas coordenadas
window = owin(c(0,400), c(0,400))) # escala espacial x, y
K_tod_tod <- Kest(coord) # función calculo Ripleys K
K_tod_tod # descripción data frame función Kest
# Las 4 parcelas
coord <- ppp(carapa$x_rev, carapa$y, # asignación de formato espacial a columnas coordenadas
window = owin(c(0,400), c(0,400))) # escala espacial x, y
K_tod_tod <- Kest(coord) # función calculo Ripleys K
K_tod_tod # descripción data frame función Kest
plot(K_tod_tod) # graficación función y estimados Ripleys K
head(as.data.frame(K_tod_tod)) # previsualización de estimados
E <- envelope(coord, Kest, nsim=100)
plot(E)
E <- envelope(coord, Kest, nsim=1000)
plot(E)
E1 <- envelope(tod_1_coor, # base de datos espacial
Kest, # función cálculo Ripleys K
nsim=1000) # generación de puntos siguiendo patrón aleatorio a partir de Kpois(theo)
plot(E1)
install.packages("geoR")
library(geoR)
View(carapa)
datgeo <- as.geodata(carapa, coords.col = 4:5, data.col = 10)
plot(datgeo)
str(carapa) # estructura de base de datos
datgeo <- as.geodata(tod_1, coords.col = 4:5, data.col = 10)
plot(datgeo)
# parcela 1
tod_1 <- carapa[carapa$Parc == "1", ]
tod_1
View(tod_1)
datgeo <- as.geodata(tod_1, coords.col = 4:5, data.col = 10)
plot(datgeo)
datgeo <- as.geodata(tod_1, coords.col = 4:5)
plot(datgeo)
datgeo <- as.geodata(tod_1, coords.col = 5:4)
plot(datgeo)
datgeo <- as.geodata(tod_1, coords.col = 4:5)
datgeo
datgeo
head(datgeo)
datgeo <- as.geodata(tod_1, coords.col = 4:5, data.col = 10)
head(datgeo)
View(datgeo)
######### librerias ##########
library(spatstat)
library(ggplot2)
####### Cargar y dar formato a datos ##########
carapa <- read.csv("Datos/Mapeamento_parcelas_corregido.csv", # cargar base de datos
header = T, # asignar títulos según primera columna
sep = ";", # separador de columnas
stringsAsFactors = TRUE)	# asignar columnas de caracteres como factores
library(geoR)
# parcela 1
tod_1 <- carapa[carapa$Parc == "1", ]
datgeo <- as.geodata(tod_1, coords.col = 4:5, data.col = 10)
plot(datgeo)
str(tod_1)
####### Cargar y dar formato a datos ##########
carapa <- read.csv("Datos/Mapeamento_parcelas_corregido.csv", # cargar base de datos
header = T, # asignar títulos según primera columna
sep = ";")	# asignar columnas de caracteres como factores
tod_1_coor <- ppp(tod_1$x_rev, tod_1$y, window = owin(c(0,400), c(0,400)))
# parcela 1
tod_1 <- carapa[carapa$Parc == "1", ]
datgeo <- as.geodata(tod_1, coords.col = 4:5, data.col = 10)
plot(datgeo)
######### librerias ##########
library(spatstat)
library(ggplot2)
####### Cargar y dar formato a datos ##########
carapa <- read.csv("Datos/Mapeamento_parcelas_corregido.csv", # cargar base de datos
header = T, # asignar títulos según primera columna
sep = ";", # separador de columnas
stringsAsFactors = TRUE)	# asignar columnas de caracteres como factores
carapa$Parc <- as.factor(carapa$Parc) # transformar "Parcelas" de entero a factor
carapa$Sub.P <- as.factor(carapa$Sub.P) # transformar "Subparcela" de entero a factor
carapa$Prod. <- as.logical(carapa$Prod.) # transformar "Producción de fruto" de entero a lógico
str(carapa) # estructura de base de datos
head(carapa) # previsualizar datos
# Las 4 parcelas
coord <- ppp(carapa$x_rev, carapa$y, # asignación de formato espacial a columnas coordenadas
window = owin(c(0,400), c(0,400))) # escala espacial x, y
K_tod_tod <- Kest(coord) # función calculo Ripleys K
K_tod_tod # descripción data frame función Kest
plot(K_tod_tod) # graficación función y estimados Ripleys K
head(as.data.frame(K_tod_tod)) # previsualización de estimados
E <- envelope(coord, # base de datos espacial
Kest, # función cálculo Ripleys K
nsim=1000) # generación de puntos siguiendo patrón aleatorio a partir de Kpois(theo)
plot(E)
library(geoR)
datgeo <- as.geodata(tod_1, coords.col = 4:5, data.col = 10)
head(datgeo)
plot(datgeo)
dist_arb2 <- ggplot(carapa, aes(x_rev, y, size = DAP) + # asignación de base de variables "x" y "y" a partir de coordenadas corregidas
dist_arb2 <- ggplot(carapa, aes(x_rev, y, size = DAP)) + # asignación de base de variables "x" y "y" a partir de coordenadas corregidas
geom_point() + # asignación de puntos en gráfico
facet_wrap(carapa$Parc) # crea gráficos por parcela
dist_arb2
####### Graficos exploratorios ############
X <- ppp(carapa$x_rev, carapa$y, window = owin(c(0,400), c(0,400))) # dar formato de datos a coordenadas (no necesario al momento)
plot(quadratcount(X))
quadrat.test(X)
quadrat.test(X, nx= 10) # prueba de cuadrados para distribución
plot(quadratcount(X), nx= 10) # dividido en cuadriculas, cuantos puntos tiene cada cuadricula
quadrat.test(X, nx= 10) # prueba de cuadrados para distribución
plot(quadratcount(X, nx= 10)) # dividido en cuadriculas, cuantos puntos tiene cada cuadricula
quadrat.test(X, nx= 10) # prueba de cuadrados para distribución
E <- envelope(coord, # base de datos espacial
Kest, # función cálculo Ripleys K
nsim=1000) # generación de puntos siguiendo patrón aleatorio a partir de Kpois(theo)
plot(E)
######### librerias ##########
library(spatstat)
library(ggplot2)
####### Cargar y dar formato a datos ##########
carapa <- read.csv("Datos/Mapeamento_parcelas_corregido.csv", # cargar base de datos
header = T, # asignar títulos según primera columna
sep = ";", # separador de columnas
stringsAsFactors = TRUE)	# asignar columnas de caracteres como factores
carapa$Parc <- as.factor(carapa$Parc) # transformar "Parcelas" de entero a factor
carapa$Sub.P <- as.factor(carapa$Sub.P) # transformar "Subparcela" de entero a factor
carapa$Prod. <- as.logical(carapa$Prod.) # transformar "Producción de fruto" de entero a lógico
str(carapa) # estructura de base de datos
head(carapa) # previsualizar datos
dist_arb <- ggplot(carapa, aes(x, y)) + # asignación de base de variables "x" y "y" a partir de coordenadas originales
geom_point() + # asignación de puntos en gráfico
facet_wrap(carapa$Parc) # crea gráficos por parcela
dist_arb
dist_arb1 <- ggplot(carapa, aes(x_rev, y)) + # asignación de base de variables "x" y "y" a partir de coordenadas corregidas
geom_point() + # asignación de puntos en gráfico
facet_wrap(carapa$Parc) # crea gráficos por parcela
dist_arb1
dist_arb2 <- ggplot(carapa, aes(x_rev, y, size = DAP)) + # asignación de base de variables "x" y "y" a partir de coordenadas corregidas
geom_point() + # asignación de puntos en gráfico
facet_wrap(carapa$Parc) # crea gráficos por parcela
dist_arb2
dens_arb <- ggplot(carapa, aes(x_rev, y)) + # asignación de base de variables "x" y "y" a partir de coordenadas
stat_density_2d(aes(fill = ..density..), # capa densidad de puntos
geom = "raster", # geometría raster
contour = FALSE) + # eliminación de contornos en puntos
facet_wrap(carapa$Parc) # crea gráficos por parcela
dens_arb
plot(quadratcount(X, nx= 10)) # dividido en cuadriculas, cuantos puntos tiene cada cuadricula
parc1 <- adultos[adultos$Parc == "1", ] # subconjunto adultos de parcela 1
parc1_coor <- ppp(parc1$x_rev, # coordenadas en x
parc1$y, # coordenadas en y
window = owin(c(0,400), # delimitación coordenadas x
c(0,400))) # delimitación coordenadas y
parc1 <- adultos[adultos$Parc == "1", ] # subconjunto adultos de parcela 1
carapa <- read.csv(".Datos/Mapeamento_parcelas_corregido.csv", # cargar base de datos
header = T, # asignar títulos según primera columna
sep = ";", # separador de columnas
stringsAsFactors = TRUE)	# asignar columnas de caracteres como factores
carapa <- read.csv("..Datos/Mapeamento_parcelas_corregido.csv", # cargar base de datos
header = T, # asignar títulos según primera columna
sep = ";", # separador de columnas
stringsAsFactors = TRUE)	# asignar columnas de caracteres como factores
carapa <- read.csv("Datos/Mapeamento_parcelas_corregido.csv", # cargar base de datos
header = T, # asignar títulos según primera columna
sep = ";", # separador de columnas
stringsAsFactors = TRUE)	# asignar columnas de caracteres como factores
carapa <- read.csv("..Datos/Mapeamento_parcelas_corregido.csv", # cargar base de datos
header = T, # asignar títulos según primera columna
sep = ";", # separador de columnas
stringsAsFactors = TRUE)	# asignar columnas de caracteres como factores
carapa <- read.csv("../Datos/Mapeamento_parcelas_corregido.csv", # cargar base de datos
header = T, # asignar títulos según primera columna
sep = ";", # separador de columnas
stringsAsFactors = TRUE)	# asignar columnas de caracteres como factores
carapa <- read.csv("../Datos/Mapeamento_parcelas_corregido.csv", # cargar base de datos
header = T, # asignar títulos según primera columna
sep = ";", # separador de columnas
stringsAsFactors = TRUE)	# asignar columnas de caracteres como factores
carapa$Parc <- as.factor(carapa$Parc) # transformar "Parcelas" de entero a factor
carapa$Sub.P <- as.factor(carapa$Sub.P) # transformar "Subparcela" de entero a factor
carapa$Prod. <- as.logical(carapa$Prod.) # transformar "Producción de fruto" de entero a lógico
str(carapa) # estructura de base de datos
head(carapa) # previsualizar datos
disp_arb <- ggplot(carapa, aes(x_rev, y)) + # asignación de base de variables "x" y "y" a partir de coordenadas x corregidas
geom_point() + # asignación de puntos en gráfico
facet_wrap(carapa$Parc) # crea gráficos por parcela
library(spatstat)
library(spatstat)
library(ggplot2)
disp_arb <- ggplot(carapa, aes(x_rev, y)) + # asignación de base de variables "x" y "y" a partir de coordenadas x corregidas
geom_point() + # asignación de puntos en gráfico
facet_wrap(carapa$Parc) # crea gráficos por parcela
disp_arb
dens_arb <- ggplot(carapa, aes(x_rev, y)) + # asignación de base de variables "x" y "y" a partir de coordenadas
stat_density_2d(aes(fill = after_stat(density)), # capa densidad de puntos
geom = "raster", # geometría raster
contour = FALSE) + # eliminación de contornos en puntos
facet_wrap(carapa$Parc) # crea gráficos por parcela
dens_arb
adultos <- carapa[carapa$DAP > "20", ] # subconjunto de individuos adultos
head(adultos)
parc1 <- adultos[adultos$Parc == "1", ] # subconjunto adultos de parcela 1
parc1_coor <- ppp(parc1$x_rev, # coordenadas en x
parc1$y, # coordenadas en y
window = owin(c(0,400), # delimitación coordenadas x
c(0,400))) # delimitación coordenadas y
K1 <- Kest(parc1_coor) # Kest= función para estimadores Ripley´s K
K1 # detalles de estimadores de función
plot(K1) # graficación de estimadores
head(as.data.frame(K1)) # previsualización de datos gráfico K1
# Parcela 2
parc2 <- adultos[adultos$Parc == "2", ]
parc2_coor <- ppp(parc2$x_rev,
parc2$y,
window = owin(c(0,400),
c(0,400)))
K2 <- Kest(parc2_coor)
plot(K2)
E1 <- envelope(parc1_coor, # base de datos espacial
Kest, # función cálculo Ripleys K
nsim=1000) # generación de puntos siguiendo patrón aleatorio a partir de Kpois(theo)
E1 <- envelope(parc1_coor, # base de datos espacial
Kest, # función cálculo Ripleys K
nsim=1000) # generación de puntos siguiendo patrón aleatorio a partir de Kpois(theo)
plot(E1)
E2 <- envelope(parc2_coor, # base de datos espacial
Kest, # función cálculo Ripleys K
nsim=1000) # generación de puntos siguiendo patrón aleatorio a partir de Kpois(theo)
E2.1 <- envelope(parc2_coor, # base de datos espacial
Kest, # función cálculo Ripleys K
nsim=100) # generación de puntos siguiendo patrón aleatorio a partir de Kpois(theo)
E2.1 <- envelope(parc2_coor, # base de datos espacial
Kest, # función cálculo Ripleys K
nsim=100) # generación de puntos siguiendo patrón aleatorio a partir de Kpois(theo)
E2.2 <- envelope(parc2_coor, # base de datos espacial
Kest, # función cálculo Ripleys K
nsim=10) # generación de puntos siguiendo patrón aleatorio a partir de Kpois(theo)
plot(E2)
plot(E2.1)
plot(E2.2)
L <- sqrt(K1/pi)
plot(L)
plot(Gest(parc1_coor))
plot(K1, . - theo ~ r)
L <- sqrt(K1/pi, - theo ~ r)
L <- sqrt(K1/pi)
plot(L, . - theo ~ r)
E3 <- envelope(parc2_coor, # base de datos espacial
sqrt(K1/pi), # función cálculo Ripleys K
nsim=1000) # generación de puntos siguiendo patrón aleatorio a partir de Kpois(theo)
A2 <- envelope(A1, global=TRUE, nsim=19, transform=expression(sqrt(./pi)))
A2 <- envelope(parc1_coor, global=TRUE, nsim=19, transform=expression(sqrt(./pi)))
plot(A2)
plot(A2, . - theo ~ r)
A2 <- envelope(parc1_coor, global=TRUE, nsim=10, transform=expression(sqrt(./pi)))
plot(A2, . - theo ~ r)
plot(A2, . - theo ~ r, legend = FALSE)
plot(A2, . - theo ~ r, legend = FALSE)
A2 <- envelope(parc1_coor, global=FALSE, nsim=10, transform=expression(sqrt(./pi)))
plot(A2, . - theo ~ r)
plot(A2, . - theo ~ r, legend = FALSE)
plot(A2, . - theo ~ r)
View(carapa)
aa <- plot(Gest(parc1_coor)) # vecino más cercano
aa
head(as.data.frame(aa))
aa
head(as.data.frame(aa))
plot(density(parc1_coor))
plot(quadratcount(parc1_coor))
plot(quadratcount(parc1_coor, nx = 10))
quadrat.test(parc1_coor)
quadrat.test(parc1_coor, nx = 10)
quadrat.test(parc1_coor, nx = 8)
quadrat.test(parc1_coor, nx = 7)
plot(quadratcount(parc1_coor, nx = 5))
quadrat.test(parc1_coor, nx = 7)
quadrat.test(parc1_coor, nx = 6)
quadrat.test(parc1_coor, nx = 5)
quadrat.test(parc1_coor, nx = 6)
quadrat.test(parc1_coor, nx = 7)
quadrat.test(parc1_coor, nx = 5)
quadrat.test(parc1_coor, nx = 6)
quadrat.test(parc1_coor, nx = 7)
quadrat.test(parc1_coor, nx = 5)
quadrat.test(parc2_coor, nx = 5)
parc3 <- adultos[adultos$Parc == "3", ]
parc3_coor <- ppp(parc3$x_rev,
parc3$y,
window = owin(c(0,400),
c(0,400)))
quadrat.test(parc3_coor, nx = 5)
parc4 <- adultos[adultos$Parc == "4", ]
parc4_coor <- ppp(parc4$x_rev,
parc4$y,
window = owin(c(0,400),
c(0,400)))
quadrat.test(parc4_coor, nx = 5)
clarkevans.test(parc4_coor, correction = "donnelly")
clarkevans.test(parc1_coor, correction = "donnelly")
clarkevans.test(parc2_coor, correction = "donnelly")
plot(K1, . - theo ~ r)
L <- sqrt(K1/pi)
plot(L, . - theo ~ r)
A2 <- envelope(parc1_coor, global=FALSE, nsim=10, transform=expression(sqrt(./pi)))
plot(A2, . - theo ~ r)
plot(A2, . - theo ~ r, legend = FALSE)
carapa <- read.csv("../Datos/Mapeamento_parcelas_corregido.csv", # cargar base de datos
header = T, # asignar títulos según primera columna
sep = ";", # separador de columnas por ";"
stringsAsFactors = TRUE)	# asignar columnas de caracteres como factores
carapa$Parc <- as.factor(carapa$Parc) # transformar "Parcelas" de entero a factor
carapa$Sub.P <- as.factor(carapa$Sub.P) # transformar "Subparcela" de entero a factor
carapa$Prod. <- as.logical(carapa$Prod.) # transformar "Producción de fruto" de entero a lógico
str(carapa) # estructura de la base de datos
head(carapa) # previsualizar datos
View(carapa)
carapa <- read.csv("../Datos/Mapeamento_parcelas_corregido.csv", # cargar base de datos
header = T, # asignar títulos según primera columna
sep = ";", # separador de columnas por ";"
stringsAsFactors = TRUE)	# asignar columnas de caracteres como factores
carapa$Parc <- as.factor(carapa$Parc) # transformar "Parcelas" de entero a factor
carapa$Sub.P <- as.factor(carapa$Sub.P) # transformar "Subparcela" de entero a factor
carapa$Prod. <- as.logical(carapa$Prod.) # transformar "Producción de fruto" de entero a lógico
str(carapa) # estructura de la base de datos
head(carapa) # previsualizar datos
disp_arb <- ggplot(carapa, aes(x_rev, y)) + # asignación de base de variables "x" y "y" a partir de coordenadas x corregidas
geom_point() + # asignación de puntos en gráfico
facet_wrap(carapa$Parc) # crea gráficos por parcela
library(spatstat)
library(spatstat)
library(ggplot2)
library(spatstat)
library(ggplot2)
### Lectura de datos y asignación de formato
```{r}
carapa <- read.csv("../Datos/Mapeamento_parcelas_corregido.csv", # cargar base de datos
header = T, # asignar títulos según primera columna
sep = ";", # separador de columnas por ";"
stringsAsFactors = TRUE)	# asignar columnas de caracteres como factores
carapa$Parc <- as.factor(carapa$Parc) # transformar "Parcelas" de entero a factor
carapa$Sub.P <- as.factor(carapa$Sub.P) # transformar "Subparcela" de entero a factor
carapa$Prod. <- as.logical(carapa$Prod.) # transformar "Producción de fruto" de entero a lógico
str(carapa) # estructura de la base de datos
### Exploración de datos
Para conocer mejor la información de los datos se puede graficar la disposición de arboles en las parcelas
```{r}
disp_arb <- ggplot(carapa, aes(x_rev, y)) + # asignación de base de variables "x" y "y" a partir de coordenadas x corregidas
geom_point() + # asignación de puntos en gráfico
facet_wrap(carapa$Parc) # crea gráficos por parcela
disp_arb
dens_arb <- ggplot(carapa, aes(x_rev, y)) + # asignación de base de variables "x" y "y" a partir de coordenadas
stat_density_2d(aes(fill = after_stat(density)), # capa densidad de puntos
geom = "raster", # geometría raster
contour = FALSE) + # eliminación de contornos en puntos
facet_wrap(carapa$Parc) # crea gráficos por parcela
dens_arb
# plot(density(parc1_coor)) # Esta es otra opción de densidad, pero para poner varios graficos hay que utilizar "nfrow" que permite dividir la pantalla en varios paneles
adultos <- carapa[carapa$DAP > "20", ] # subconjunto de individuos adultos
head(adultos)
parc1 <- adultos[adultos$Parc == "1", ] # subconjunto adultos de parcela 1
# Dar formato de coordenadas a variables "x" y "y"
parc1_coor <- ppp(parc1$x_rev, # coordenadas en x
parc1$y, # coordenadas en y
window = owin(c(0,400), # delimitación coordenadas x
c(0,400))) # delimitación coordenadas y
clarkevans.test(parc1_coor, correction = "donnelly") # calculo de R con correción efecto borde
parc2 <- adultos[adultos$Parc == "2", ]
parc2_coor <- ppp(parc2$x_rev,
parc2$y,
window = owin(c(0,400),
c(0,400)))
clarkevans.test(parc2_coor, correction = "donnelly")
plot(quadratcount(parc1_coor)) # distribución conjunto de datos
quadrat.test(parc1_coor, nx = 5) # hipótesis nula aleatorio
quadrat.test(parc2_coor)
K1 <- Kest(parc1_coor) # Kest= función para estimadores Ripley´s K
K1 # detalles de estimadores de función
plot(K1) # graficación de estimadores
head(as.data.frame(K1)) # previsualización de datos gráfico K1
K1 <- Kest(parc1_coor) # Kest= función para estimadores Ripley´s K
K1 # detalles de estimadores de función
plot(K1,
xlab= "tamaño del cuadrante",
ylab= "estimado") # graficación de estimadores
head(as.data.frame(K1)) # previsualización de datos gráfico K1
K1 <- Kest(parc1_coor) # Kest= función para estimadores Ripley´s K
K1 # detalles de estimadores de función
plot(K1,
xlab= "Tamaño del cuadrante",
ylab= "Estimador de Ripley") # graficación de estimadores
head(as.data.frame(K1)) # previsualización de datos gráfico K1
K1 <- Kest(parc1_coor) # Kest= función para estimadores Ripley´s K
K1 # detalles de estimadores de función
plot(K1,
xlab= "Tamaño del cuadrante",
ylab= "K de Ripley") # graficación de estimadores
head(as.data.frame(K1)) # previsualización de datos gráfico K1
K1 <- Kest(parc1_coor) # Kest= función para estimadores Ripley´s K
K1 # detalles de estimadores de función
plot(K1,
xlab= "Tamaño del cuadrante",
ylab= "K de Ripley") # graficación de estimadores,
main= "Distribución K de Ripley"
head(as.data.frame(K1)) # previsualización de datos gráfico K1
K1 <- Kest(parc1_coor) # Kest= función para estimadores Ripley´s K
K1 # detalles de estimadores de función
plot(K1,
xlab= "Tamaño del cuadrante",
ylab= "K de Ripley",
main= "Distribución K de Ripley") # graficación de estimadores
head(as.data.frame(K1)) # previsualización de datos gráfico K1
# Parcela 2
K2 <- Kest(parc2_coor)
plot(K2,
xlab= "Tamaño del cuadrante",
ylab= "K de Ripley",
main= "Distribución K de Ripley")
E1 <- envelope(parc1_coor, # base de datos espacial
Kest, # función cálculo Ripleys K
nsim=1000) # generación de puntos siguiendo patrón aleatorio a partir de Kpois(theo)
plot(E1,
xlab= "Tamaño del cuadrante",
ylab= "K de Ripley",
main= "Distribución K de Ripley")
E2 <- envelope(parc2_coor,
Kest,
nsim=1000)
E2.1 <- envelope(parc2_coor,
Kest,
nsim=100)
E2.2 <- envelope(parc2_coor,
Kest,
nsim=10)
plot(E2,
xlab= "Tamaño del cuadrante",
ylab= "K de Ripley",
main= "Distribución K de Ripley")
plot(E2.1,
xlab= "Tamaño del cuadrante",
ylab= "K de Ripley",
main= "Distribución K de Ripley")
plot(E2.2,
xlab= "Tamaño del cuadrante",
ylab= "K de Ripley",
main= "Distribución K de Ripley")
L <- sqrt(K1/pi) # transformación Besag's L
plot(L)
L <- sqrt(K1/pi) # transformación Besag's L
plot(L,
xlab= "Tamaño del cuadrante",
ylab= "L de Besag",
main= "Distribución de Besag")
L <- sqrt(K1/pi)
plot(L, . - theo ~ r)
L <- sqrt(K1/pi)
plot(L, . - theo ~ r,
xlab= "Tamaño del cuadrante",
ylab= "L de Besag´s",
main= "Distribución de Besag´s")
L <- sqrt(K1/pi) # transformación Besag's L
plot(L,
xlab= "Tamaño del cuadrante",
ylab= "L de Besag",
main= "Distribución de Besag")
L <- sqrt(K1/pi)
plot(L, . - theo ~ r,
xlab= "Tamaño del cuadrante",
ylab= "L de Besag",
main= "Distribución de Besag")
L <- sqrt(K1/pi)
plot(L, . - theo ~ r,
xlab= "Tamaño del cuadrante",
ylab= "L de Besag",
main= "Distribución de Besag",
legend= FALSE)
L <- sqrt(K1/pi)
plot(L, . - theo ~ r,
xlab= "Tamaño del cuadrante",
ylab= "L de Besag",
main= "Distribución de Besag")
#legend= FALSE)
L <- sqrt(K1/pi)
plot(L, . - theo ~ r,
xlab= "Tamaño del cuadrante",
ylab= "L de Besag",
main= "Distribución de Besag",
legend= FALSE)
L <- sqrt(K1/pi) # transformación Besag's L
plot(L,
xlab= "Tamaño del cuadrante",
ylab= "L de Besag",
main= "Distribución de Besag",
legend = FALSE)
A2 <- envelope(parc1_coor, global=FALSE, nsim=10, transform=expression(sqrt(./pi)))
plot(A2, . - theo ~ r)
plot(A2, . - theo ~ r, legend = FALSE) # eliminar leyenda
A2 <- envelope(parc1_coor, global=FALSE, nsim=10, transform=expression(sqrt(./pi)))
plot(A2, . - theo ~ r,
xlab= "Tamaño del cuadrante",
ylab= "L de Besag",
main= "Distribución de Besag",
legend= FALSE)
A2 <- envelope(parc1_coor, global=FALSE, nsim=10, transform=expression(sqrt(./pi)))
plot(A2, . - theo ~ r,
xlab= "Tamaño del cuadrante",
ylab= "L de Besag",
main= "Distribución de Besag")
plot(A2, . - theo ~ r,
xlab= "Tamaño del cuadrante",
ylab= "L de Besag",
main= "Distribución de Besag",
legend = FALSE) # eliminar leyenda
